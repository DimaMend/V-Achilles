import Graph from 'react-graph-vis';

import { chaining } from '../../../utils/report-interface';
import { severityColor } from '../../../utils/severityColor';

interface VulnerabilityGraphProps {
  chainings: chaining[];
  severity: string;
  graphWidth: number;
  vulnerabilityPackage: string;
}

const VulnerabilityGraph: React.FC<VulnerabilityGraphProps> = ({
  chainings,
  severity,
  graphWidth,
  vulnerabilityPackage,
}) => {
  const vulnerabilityOptions = {
    color: severityColor(severity),
    font: { color: severityColor(severity), size: 10 },
  };

  const graph = () => {
    let nodes: any = [];
    let edges: any = [];

    for (let i = 0; i < chainings.length; i++) {
      const source = chainings[i].source;
      const target = chainings[i].target;

      if (
        !nodes.some((node: any) => node.id === source) ||
        nodes.length === 0
      ) {
        let tempNode: any = {
          id: source,
          label: source,
        };
        if (source.indexOf(vulnerabilityPackage) > -1) {
          tempNode = {
            ...tempNode,
            color: vulnerabilityOptions.color,
            font: vulnerabilityOptions.font,
          };
        } else {
          tempNode = {
            ...tempNode,
            font: { size: 10 },
          };
        }
        nodes.push(tempNode);
      }

      if (!nodes.some((node: any) => node.id === target)) {
        let tempNode: any = {
          id: target,
          label: target,
        };
        if (target.indexOf(vulnerabilityPackage) > -1) {
          tempNode = {
            ...tempNode,
            color: vulnerabilityOptions.color,
            font: vulnerabilityOptions.font,
          };
        } else {
          tempNode = {
            ...tempNode,
            font: { size: 10 },
          };
        }
        nodes.push(tempNode);
      }

      let tempEdge: any = {
        from: source,
        to: target,
      };

      if (target.indexOf(vulnerabilityPackage) > -1) {
        tempEdge = {
          ...tempEdge,
          color: vulnerabilityOptions.color,
        };
      }
      edges.push(tempEdge);
    }

    return { nodes, edges };
  };

  const options = {
    layout: {
      hierarchical: {
        enabled: true,
        direction: 'LR',
        treeSpacing: 50,
        // levelSeparation: 100,
      },
    },
    edges: {
      chosen: false,
      physics: false,
      width: 1,
    },
    nodes: {
      chosen: false,
      fixed: false,
      shape: 'dot',
      size: 20,
      physics: false,
      borderWidth: 1,
      color: {
        border: '#000000',
        background: '#ffffff',
      },
      font: {
        size: 17,
      },
    },
    interaction: {
      // dragNodes: false,
      // dragView: false,
      zoomSpeed: 0.5,
    },
    height: '100px',
    width: `${graphWidth}px`,
  };

  return <Graph graph={graph()} options={options} />;
};

export default VulnerabilityGraph;
