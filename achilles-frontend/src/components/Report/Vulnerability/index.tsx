import { useState } from "react";
import {
  Box,
  Link,
  Grid,
  Paper,
  Select,
  Divider,
  Typography,
  InputLabel,
  FormControl,
} from "@material-ui/core";
import { makeStyles } from "@material-ui/core/styles";

import {
  highSeverityColor,
  moderateSeverityColor,
  lowSeverityColor,
} from "../../../utils/severityColor";
import { item, identifier } from "../../../utils/report-interface";

import VulnerabilityGraph from "./VulnerabilityGraph";

const useStyles = makeStyles((theme) => ({
  paperContainer: {
    boxShadow: "0px 1px 5px 0px rgba(169,169,169,0.5)",
    padding: theme.spacing(2, 2),
    borderRadius: theme.spacing(2),
  },
  formControl: {
    margin: theme.spacing(1),
    minWidth: 120,
  },
  dropDownIcon: {
    fill: "#65c8d0",
  },
  divider: {
    width: "90%",
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(1),
    marginLeft: "5%",
  },
  highSeverityText: {
    color: highSeverityColor,
  },
  moderateSeverityText: {
    color: moderateSeverityColor,
  },
  lowSeverityText: {
    color: lowSeverityColor,
  },
}));

const Vulnerability: React.FC<{ items: item[] }> = ({ items }) => {
  const classes = useStyles();
  const [sortValue, setSortValue] = useState("");
  const [packages, setPackages] = useState<item[]>(items);

  const handleSortValue = (event: any) => {
    const value = event.target.value;
    const packagesTemp = packages;
    const priorities = ["HIGH", "MODERATE", "LOW"];

    if (value && value === "high-low") {
      packagesTemp.sort((a, b) => {
        const firstPrio = priorities.indexOf(a.severity);
        const secondPrio = priorities.indexOf(b.severity);
        return firstPrio - secondPrio;
      });
    } else if (value && value === "low-high") {
      packagesTemp.sort((a, b) => {
        const firstPrio = priorities.indexOf(b.severity);
        const secondPrio = priorities.indexOf(a.severity);
        return firstPrio - secondPrio;
      });
    }

    setPackages(packagesTemp);
    setSortValue(value);
  };

  return (
    <Paper elevation={0} className={classes.paperContainer}>
      <Box
        display="flex"
        flexDirection="row"
        alignItems="center"
        justifyContent="space-between"
      >
        <Typography variant="h6">
          {packages?.length > 1 ? "Vulnerabilities" : "Vulnerability"}
        </Typography>
        <FormControl
          variant="outlined"
          className={classes.formControl}
          size="small"
        >
          <InputLabel htmlFor="sort-by">Sort By</InputLabel>
          <Select
            native
            value={sortValue}
            onChange={handleSortValue}
            label="sort-by"
            inputProps={{
              name: "sort",
              id: "sort-by",
              classes: {
                icon: classes.dropDownIcon,
              },
            }}
          >
            <option aria-label="None" value="" />
            <option value="high-low">High - Low</option>
            <option value="low-high">Low - High</option>
          </Select>
        </FormControl>
      </Box>
      <Divider />
      <Box mt={2} mb={1} px={2}>
        {packages?.map((item: item, index: number) => {
          return (
            <Box key={index}>
              <Grid container spacing={1}>
                <Grid item xs={6}>
                  <Typography variant="body1">
                    Potentially Vulnerable:
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2">{item.package.name}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body1">Severity:</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography
                    variant="body2"
                    className={
                      item.severity === "HIGH"
                        ? classes.highSeverityText
                        : item.severity === "LOW"
                        ? classes.lowSeverityText
                        : classes.moderateSeverityText
                    }
                  >
                    {item.severity}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body1">Vulnerable Version:</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2">
                    {item.vulnerableVersionRange}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body1">Patch Version:</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2">
                    {item.firstPatchedVersion.identifier}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body1">
                    Vulnerability Chaining:
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Box mb={2}>
                    <VulnerabilityGraph
                      {...{
                        chainings: item.chaining,
                        severity: item.severity,
                      }}
                    />
                  </Box>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body1">
                    Vulnerabilities and advisory link:{" "}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  {item.advisory.identifiers.map(
                    (identifier: identifier, index: number) => {
                      return (
                        <Box
                          mb={
                            index < item.advisory.identifiers.length - 1 ? 1 : 0
                          }
                          key={index}
                        >
                          <Typography variant="body2">
                            <Link
                              href={`${
                                identifier.type === "GHSA"
                                  ? "https://github.com/advisories/"
                                  : "https://nvd.nist.gov/vuln/detail/"
                              }${identifier.value}`}
                              color="inherit"
                              target="_blank"
                              variant="body2"
                            >
                              {identifier.value}
                            </Link>
                          </Typography>
                        </Box>
                      );
                    }
                  )}
                </Grid>
              </Grid>
              {index < packages?.length - 1 ? (
                <Divider variant="middle" className={classes.divider} />
              ) : (
                ""
              )}
            </Box>
          );
        })}
      </Box>
    </Paper>
  );
};

export default Vulnerability;
